// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   //And, And16, DMux, DMux4Way, DMux8Way, Mux, Mux4Way16, Mux8Way16, Mux16, Not, Not16, Or, Or8Way, Or16, Xor, Add16, HalfAdder, FullAdder, Inc16

   Not16(in=x, out=notx);

   //All 0
   And16(a=x, b=notx, out=stzero);
   //All 1
   //Not16(in=stzero, out=stone);
   
   //Decide zx
   Mux16(a=x, b=stzero, sel=zx, out=decidezx);
   Not16(in=decidezx, out=notdecidezx);
   //Decide nx
   Mux16(a=decidezx, b=notdecidezx , sel=nx , out=finalx);

   //Decide zy
   Mux16(a=y, b=stzero, sel=zy, out=decidezy);
   Not16(in=decidezy, out=notdecidezy);
   //Decide ny
   Mux16(a=decidezy , b=notdecidezy , sel=ny , out=finaly);
   
   //Add
   Add16(a=finalx, b=finaly, out=addxy);

   //And
   And16(a=finalx, b=finaly, out=andxy);

   //outdraft
   Mux16(a=andxy, b=addxy, sel=f, out=outdraft);

   //notoutdraft
   Not16(in=outdraft, out=notoutdraft);
  
   //outfinal
   Mux16(a=outdraft, b=notoutdraft, sel=no, out=out, out[0..7]=out07, out[8..15]=out815, out[15]=out15);

   //zr
   Or8Way(in=out07, out=or1);
   Or8Way(in=out815, out=or2);
   Not(in=or1, out=nor1);
   Not(in=or2, out=nor2);
   And(a=nor1, b=nor2, out=zr);

   //ng
   Mux(a=false, b=true, sel=out15, out=ng);
   
}

