// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=toA);
    And(a=instruction[15], b=instruction[5], out=loadAregFromC);
    Not(in=instruction[15], out=aInst);
    Or(a=aInst, b=loadAregFromC, out=loadAreg);
    ARegister(in=toA, load=loadAreg , out=aOut, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[12], out=sel2Mux);
    Mux16(a=aOut, b=inM, sel=sel2Mux, out=mOrAout);

    And(a=instruction[15], b=instruction[4], out=loadDreg);
    DRegister(in=aluOutput, load=loadDreg, out=dOut);
    
    ALU(x=dOut , y=mOrAout , zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOutput, zr=zeroALU, ng=negALU);

    And(a=instruction[15], b=instruction[3], out=writeM);

    And(a=instruction[15], b=instruction[1], out=eq);
    And(a=instruction[15], b=instruction[0], out=gt);
    And(a=instruction[15], b=instruction[2], out=lt);
    And(a=eq, b=gt, out=gte);
    And(a=eq, b=lt, out=lte);
    And(a=gt, b=lt, out=ne);

    And(a=zeroALU, b=eq, out=load1);
    Not(in=negALU, out=notnegALU);
    And(a=notnegALU, b=notZeroALU, out=posALU);
    And(a=posALU, b=gt, out=load2);
    And(a=negALU, b=lt, out=load3);

    Or(a=zeroALU, b=posALU, out=ALUposOrEq);
    And(a=ALUposOrEq, b=gte, out=load4);

    Or(a=zeroALU, b=negALU, out=ALUnegOrEq);
    And(a=ALUnegOrEq, b=lte, out=load5);

    Not(in=zeroALU, out=notZeroALU);
    And(a=notZeroALU, b=ne, out=load6);

    And(a=gte, b=lte, out=load7);

    Or(a=load1, b=load2, out=t1);
    Or(a=load3, b=t1, out=t2);
    Or(a=load4, b=t2, out=t3);
    Or(a=load5, b=t3, out=t4);
    Or(a=load6, b=t4, out=t5);
    Or(a=load7, b=t5, out=t6);

    PC(in=aOut, load=t6, inc=true, reset=reset, out[0..14]=pc);

}
