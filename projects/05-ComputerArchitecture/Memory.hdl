// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // a[14]=1 and a[13]=0 implies screen and a[14] implies keys 
    Not(in=address[14], out=load16temp);
    And(a=load16temp, b=load, out=load16);
    
    Not(in=address[13], out=not13);
    And(a=address[14], b=not13, out=loadscreentemp);
    
    And(a=loadscreentemp, b=load, out=loadscreen);
    And(a=address[14], b=address[13], out=selkey);
    RAM16K(in=in ,load=load16 ,address=address[0..13] ,out=out16); 
    Screen(in=in ,load=loadscreen ,address=address[0..12] ,out=outscreen ); 
    Keyboard(out=outkey ); 

    Mux16(a=out16, b=outscreen, sel=address[14], out=out16orScreen);
    Mux16(a=out16orScreen, b=outkey, sel=selkey, out=out);


}
